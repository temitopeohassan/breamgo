{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Marketplace is Ownable, ReentrancyGuard {\n    uint256 private _serviceIdCounter;\n    uint256 private _requestIdCounter;\n    uint256 private _orderIdCounter;\n    uint256 private _blogPostIdCounter;\n\n    enum OrderStatus { Pending, Completed, Cancelled, Dispute }\n\n    struct Service {\n        uint256 id;\n        address payable provider;\n        string name;\n        string image;\n        string description;\n        uint256 price;\n    }\n\n    struct Request {\n        uint256 id;\n        address requester;\n        string serviceName;\n        string description;\n        uint256 budget;\n    }\n\n    struct Order {\n        uint256 id;\n        uint256 serviceId;\n        address buyer;\n        uint256 totalAmount;\n        OrderStatus status;\n    }\n\n    struct BlogPost {\n        uint256 id;\n        string title;\n        string content;\n        address author;\n    }\n\n    mapping(uint256 => Service) public services;\n    mapping(uint256 => Request) public requests;\n    mapping(uint256 => Order) public orders;\n    mapping(address => uint256[]) public providerServices;\n    mapping(address => uint256[]) public buyerOrders;\n    mapping(uint256 => BlogPost) public blogPosts;\n\n    event ServiceCreated(uint256 serviceId, address provider, string name, string image, string description, uint256 price);\n    event RequestCreated(uint256 requestId, address requester);\n    event OrderPlaced(uint256 orderId, uint256 serviceId, address buyer);\n    event OrderCompleted(uint256 orderId);\n    event OrderDisputed(uint256 orderId);\n    event OrderResolved(uint256 orderId, address recipient);\n    event BlogPostCreated(uint256 postId, string title, string content, address author);\n    event ProviderCreated(address provider);\n\n    // Create a new service\n    function createService(\n        string memory _name,\n        string memory _image,\n        string memory _description,\n        uint256 _price\n    ) public {\n        uint256 serviceId = _serviceIdCounter++;\n\n        // If this is the provider's first service, emit ProviderCreated event\n        if (providerServices[msg.sender].length == 0) {\n            emit ProviderCreated(msg.sender);\n        }\n\n        services[serviceId] = Service({\n            id: serviceId,\n            provider: payable(msg.sender),\n            name: _name,\n            image: _image,\n            description: _description,\n            price: _price\n        });\n\n        providerServices[msg.sender].push(serviceId);\n        emit ServiceCreated(serviceId, msg.sender, _name, _image, _description, _price);\n    }\n\n    // Create a new request for a service\n    function createRequest(\n        string memory _serviceName,\n        string memory _description,\n        uint256 _budget\n    ) public {\n        uint256 requestId = _requestIdCounter++;\n        requests[requestId] = Request({\n            id: requestId,\n            requester: msg.sender,\n            serviceName: _serviceName,\n            description: _description,\n            budget: _budget\n        });\n\n        emit RequestCreated(requestId, msg.sender);\n    }\n\n    // Place an order for a service\n    function placeOrder(uint256 _serviceId) public payable nonReentrant {\n        Service memory service = services[_serviceId];\n        uint256 totalAmount = service.price;\n        require(msg.value == totalAmount, \"Incorrect payment amount\");\n\n        uint256 orderId = _orderIdCounter++;\n        orders[orderId] = Order({\n            id: orderId,\n            serviceId: _serviceId,\n            buyer: msg.sender,\n            totalAmount: totalAmount,\n            status: OrderStatus.Pending\n        });\n\n        buyerOrders[msg.sender].push(orderId);\n        emit OrderPlaced(orderId, _serviceId, msg.sender);\n    }\n\n    // Complete an order (only the buyer can mark the order as completed)\n    function completeOrder(uint256 _orderId) public nonReentrant {\n        Order storage order = orders[_orderId];\n        require(order.status == OrderStatus.Pending, \"Order already completed, cancelled, or in dispute\");\n        require(msg.sender == order.buyer, \"Only the buyer can mark the order as completed\");\n\n        order.status = OrderStatus.Completed;\n        Service memory service = services[order.serviceId];\n        service.provider.transfer(order.totalAmount);\n\n        emit OrderCompleted(_orderId);\n    }\n\n    // Mark an order as disputed\n    function disputeOrder(uint256 _orderId) public {\n        Order storage order = orders[_orderId];\n        require(order.status == OrderStatus.Pending, \"Order already completed, cancelled, or in dispute\");\n        require(msg.sender == order.buyer || msg.sender == services[order.serviceId].provider, \"Only the buyer or provider can dispute the order\");\n\n        order.status = OrderStatus.Dispute;\n        emit OrderDisputed(_orderId);\n    }\n\n    // Resolve a disputed order (only the contract owner can resolve disputes)\n    function resolveDispute(uint256 _orderId, bool refundBuyer) public onlyOwner nonReentrant {\n        Order storage order = orders[_orderId];\n        require(order.status == OrderStatus.Dispute, \"Order not in dispute\");\n\n        order.status = OrderStatus.Cancelled; // Set status to Cancelled to prevent further actions\n\n        if (refundBuyer) {\n            payable(order.buyer).transfer(order.totalAmount);\n            emit OrderResolved(_orderId, order.buyer);\n        } else {\n            services[order.serviceId].provider.transfer(order.totalAmount);\n            emit OrderResolved(_orderId, services[order.serviceId].provider);\n        }\n    }\n\n    // Add a blog post (only the contract owner can add posts)\n    function addBlogPost(string memory _title, string memory _content) public onlyOwner {\n        uint256 postId = _blogPostIdCounter++;\n        blogPosts[postId] = BlogPost({\n            id: postId,\n            title: _title,\n            content: _content,\n            author: msg.sender\n        });\n\n        emit BlogPostCreated(postId, _title, _content, msg.sender);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}